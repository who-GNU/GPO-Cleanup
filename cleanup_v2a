# GPO Audit Tool with GUI
# Finds unlinked GPOs and those that haven't been modified in X days
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Import required modules - check if they're available first
$requiredModules = @("GroupPolicy", "ActiveDirectory")
foreach ($module in $requiredModules) {
    if (!(Get-Module -ListAvailable -Name $module)) {
        [System.Windows.Forms.MessageBox]::Show("Required module '$module' not found. Please install it before running this tool.", "Module Missing", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        exit
    }
}

Import-Module GroupPolicy
Import-Module ActiveDirectory

# Function to collect all linked GPO GUIDs in the domain
function Get-LinkedGPOGuids {
    $LinkedGPOGuids = @{}
    
    # Update status
    $statusLabel.Text = "Status: Collecting linked GPOs..."
    $form.Refresh()
    
    # Check domain root
    try {
        $DomainRoot = Get-ADDomain
        if ($DomainRoot.LinkedGroupPolicyObjects) {
            foreach ($Link in $DomainRoot.LinkedGroupPolicyObjects) {
                # Extract GUID from the link string
                if ($Link -match '\{([0-9a-fA-F-]+)\}') {
                    $Guid = $Matches[1]
                    $LinkedGPOGuids[$Guid] = $true
                }
            }
        }
    } catch {
        [System.Windows.Forms.MessageBox]::Show("Error checking domain root links: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
    
    # Check all OUs
    try {
        $AllOUs = Get-ADOrganizationalUnit -Filter * -Properties LinkedGroupPolicyObjects
        foreach ($OU in $AllOUs) {
            if ($OU.LinkedGroupPolicyObjects) {
                foreach ($Link in $OU.LinkedGroupPolicyObjects) {
                    # Extract GUID from the link string
                    if ($Link -match '\{([0-9a-fA-F-]+)\}') {
                        $Guid = $Matches[1]
                        $LinkedGPOGuids[$Guid] = $true
                    }
                }
            }
        }
    } catch {
        [System.Windows.Forms.MessageBox]::Show("Error checking OU links: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
    
    return $LinkedGPOGuids
}

# Main function to run the GPO audit
function Start-GPOAudit {
    $DaysThreshold = [int]$daysTextBox.Text
    
    # Validate input
    if ($DaysThreshold -le 0) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a positive number for days threshold.", "Invalid Input", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }
    
    # Disable the start button while processing
    $startButton.Enabled = $false
    $exportButton.Enabled = $false
    $progressBar.Value = 0
    $resultsTextBox.Clear()
    
    # Get the current date to compare with
    $CurrentDate = Get-Date
    
    # Update log with header
    $resultsTextBox.AppendText("========================`r`n")
    $resultsTextBox.AppendText("GPO AUDIT REPORT`r`n")
    $resultsTextBox.AppendText("========================`r`n")
    $resultsTextBox.AppendText("Started: $(Get-Date)`r`n")
    $resultsTextBox.AppendText("Days threshold: $DaysThreshold`r`n`r`n")
    
    # Collect all linked GPO GUIDs
    $statusLabel.Text = "Status: Collecting linked GPOs..."
    $form.Refresh()
    $LinkedGPOGuids = Get-LinkedGPOGuids
    
    # Get all GPOs in the domain
    $statusLabel.Text = "Status: Retrieving all GPOs..."
    $form.Refresh()
    $AllGPOs = Get-GPO -All
    
    # Initialize results arrays
    $UnlinkedGPOs = @()
    $OldGPOs = @()
    $TotalCount = $AllGPOs.Count
    $CurrentCount = 0
    
    $statusLabel.Text = "Status: Processing $TotalCount GPOs..."
    $form.Refresh()
    
    foreach ($GPO in $AllGPOs) {
        $CurrentCount++
        $progressBar.Value = [int](($CurrentCount / $TotalCount) * 100)
        $statusLabel.Text = "Status: Processing $CurrentCount of $TotalCount GPOs..."
        $form.Refresh()
        
        # Check if GPO is linked by looking up its GUID in the hashtable
        $IsLinked = $LinkedGPOGuids.ContainsKey($GPO.Id.Guid.ToString())
        $ModificationTime = $GPO.ModificationTime
        $DaysSinceModified = ($CurrentDate - $ModificationTime).Days
        
        # Check if GPO is unlinked
        if (-not $IsLinked) {
            $UnlinkedGPOs += [PSCustomObject]@{
                Name = $GPO.DisplayName
                ID = $GPO.Id.Guid
                CreationTime = $GPO.CreationTime
                ModificationTime = $ModificationTime
                DaysSinceModified = $DaysSinceModified
            }
        }
        
        # Check if GPO hasn't been modified within threshold
        if ($DaysSinceModified -gt $DaysThreshold) {
            $OldGPOs += [PSCustomObject]@{
                Name = $GPO.DisplayName
                ID = $GPO.Id.Guid
                IsLinked = $IsLinked
                CreationTime = $GPO.CreationTime
                ModificationTime = $ModificationTime
                DaysSinceModified = $DaysSinceModified
            }
        }
    }
    
    # Create a combined report of unlinked GPOs that are also old
    $UnlinkedAndOld = $UnlinkedGPOs | Where-Object { $_.DaysSinceModified -gt $DaysThreshold }
    
    # Display results in the text box
    $resultsTextBox.AppendText("========================`r`n")
    $resultsTextBox.AppendText("UNLINKED GPOs: $($UnlinkedGPOs.Count)`r`n")
    $resultsTextBox.AppendText("========================`r`n")
    if ($UnlinkedGPOs.Count -gt 0) {
        $resultsTextBox.AppendText(($UnlinkedGPOs | Format-Table -Property Name, ID, ModificationTime, DaysSinceModified -AutoSize | Out-String))
    } else {
        $resultsTextBox.AppendText("No unlinked GPOs found.`r`n")
    }
    
    $resultsTextBox.AppendText("`r`n========================`r`n")
    $resultsTextBox.AppendText("GPOs not modified in the last $DaysThreshold days: $($OldGPOs.Count)`r`n")
    $resultsTextBox.AppendText("========================`r`n")
    if ($OldGPOs.Count -gt 0) {
        $resultsTextBox.AppendText(($OldGPOs | Format-Table -Property Name, ID, IsLinked, ModificationTime, DaysSinceModified -AutoSize | Out-String))
    } else {
        $resultsTextBox.AppendText("No GPOs older than $DaysThreshold days found.`r`n")
    }
    
    $resultsTextBox.AppendText("`r`n========================`r`n")
    $resultsTextBox.AppendText("UNLINKED GPOs not modified in the last $DaysThreshold days: $($UnlinkedAndOld.Count)`r`n")
    $resultsTextBox.AppendText("========================`r`n")
    if ($UnlinkedAndOld.Count -gt 0) {
        $resultsTextBox.AppendText(($UnlinkedAndOld | Format-Table -Property Name, ID, ModificationTime, DaysSinceModified -AutoSize | Out-String))
    } else {
        $resultsTextBox.AppendText("No unlinked GPOs older than $DaysThreshold days found.`r`n")
    }
    
    $resultsTextBox.AppendText("`r`n========================`r`n")
    $resultsTextBox.AppendText("SUMMARY:`r`n")
    $resultsTextBox.AppendText("========================`r`n")
    $resultsTextBox.AppendText("Total GPOs: $($AllGPOs.Count)`r`n")
    $resultsTextBox.AppendText("Unlinked GPOs: $($UnlinkedGPOs.Count)`r`n")
    $resultsTextBox.AppendText("GPOs not modified in the last $DaysThreshold days: $($OldGPOs.Count)`r`n")
    $resultsTextBox.AppendText("Unlinked GPOs not modified in the last $DaysThreshold days: $($UnlinkedAndOld.Count)`r`n")
    $resultsTextBox.AppendText("`r`nAudit completed: $(Get-Date)`r`n")
    
    # Store results for export
    $script:reportData = $UnlinkedAndOld
    
    # Re-enable buttons
    $startButton.Enabled = $true
    $exportButton.Enabled = $true
    $statusLabel.Text = "Status: Audit completed"
}

# Function to export results to CSV
function Export-Results {
    if ($null -eq $script:reportData) {
        [System.Windows.Forms.MessageBox]::Show("No data to export. Please run the audit first.", "No Data", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        return
    }
    
    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "CSV Files (*.csv)|*.csv|All Files (*.*)|*.*"
    $saveFileDialog.DefaultExt = "csv"
    $saveFileDialog.FileName = "GPO_Audit_Report_$(Get-Date -Format 'yyyyMMdd').csv"
    
    if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $script:reportData | Export-Csv -Path $saveFileDialog.FileName -NoTypeInformation
        [System.Windows.Forms.MessageBox]::Show("Report exported to: $($saveFileDialog.FileName)", "Export Complete", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
    }
}

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = "GPO Audit Tool"
$form.Size = New-Object System.Drawing.Size(800, 600)
$form.StartPosition = "CenterScreen"
$form.MinimumSize = New-Object System.Drawing.Size(800, 600)

# Create controls
$titleLabel = New-Object System.Windows.Forms.Label
$titleLabel.Text = "GPO Audit Tool"
$titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 16, [System.Drawing.FontStyle]::Bold)
$titleLabel.AutoSize = $true
$titleLabel.Location = New-Object System.Drawing.Point(20, 20)

# Fixed: Increased Y position for the description label to prevent overlap
$descriptionLabel = New-Object System.Windows.Forms.Label
$descriptionLabel.Text = "Find unlinked GPOs and those that haven't been modified recently."
$descriptionLabel.AutoSize = $true
$descriptionLabel.Location = New-Object System.Drawing.Point(20, 60)
$descriptionLabel.Size = New-Object System.Drawing.Size(750, 20) # Fixed width to ensure it has enough space

# Adjusted spacing for all controls below
$daysLabel = New-Object System.Windows.Forms.Label
$daysLabel.Text = "Days since last modification:"
$daysLabel.AutoSize = $true
$daysLabel.Location = New-Object System.Drawing.Point(20, 100)

$daysTextBox = New-Object System.Windows.Forms.TextBox
$daysTextBox.Text = "90"
$daysTextBox.Size = New-Object System.Drawing.Size(60, 20)
$daysTextBox.Location = New-Object System.Drawing.Point(200, 100)

$startButton = New-Object System.Windows.Forms.Button
$startButton.Text = "Start Audit"
$startButton.Size = New-Object System.Drawing.Size(100, 30)
$startButton.Location = New-Object System.Drawing.Point(280, 95)
$startButton.Add_Click({ Start-GPOAudit })

$exportButton = New-Object System.Windows.Forms.Button
$exportButton.Text = "Export Results"
$exportButton.Size = New-Object System.Drawing.Size(100, 30)
$exportButton.Location = New-Object System.Drawing.Point(390, 95)
$exportButton.Add_Click({ Export-Results })

$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Size = New-Object System.Drawing.Size(740, 20)
$progressBar.Location = New-Object System.Drawing.Point(20, 140)
$progressBar.Style = "Continuous"

$statusLabel = New-Object System.Windows.Forms.Label
$statusLabel.Text = "Status: Ready"
$statusLabel.AutoSize = $true
$statusLabel.Location = New-Object System.Drawing.Point(20, 170)

$resultsTextBox = New-Object System.Windows.Forms.RichTextBox
$resultsTextBox.Size = New-Object System.Drawing.Size(740, 350)
$resultsTextBox.Location = New-Object System.Drawing.Point(20, 190)
$resultsTextBox.ReadOnly = $true
$resultsTextBox.Font = New-Object System.Drawing.Font("Consolas", 9)
$resultsTextBox.BackColor = [System.Drawing.Color]::White

# Add controls to the form
$form.Controls.Add($titleLabel)
$form.Controls.Add($descriptionLabel)
$form.Controls.Add($daysLabel)
$form.Controls.Add($daysTextBox)
$form.Controls.Add($startButton)
$form.Controls.Add($exportButton)
$form.Controls.Add($progressBar)
$form.Controls.Add($statusLabel)
$form.Controls.Add($resultsTextBox)

# Initialize global variable for report data
$script:reportData = $null

# Show the form
$form.Add_Shown({$form.Activate()})
[void] $form.ShowDialog()
